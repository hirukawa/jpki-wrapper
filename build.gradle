apply plugin: 'java'
apply plugin: 'eclipse'

archivesBaseName = 'jpki-wrapper'
version = '0.1'

tasks.withType(JavaCompile) {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
    compileJava.options.bootClasspath = "$System.env.JAVA_HOME/jre/lib/rt.jar"
}

def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile).each { it.options.encoding = defaultEncoding }
tasks.withType(GroovyCompile).each { it.groovyOptions.encoding = defaultEncoding }

javadoc {
	options.charSet = 'UTF-8'
	options.encoding = 'UTF-8'
	options.stylesheetFile = new File(rootDir, 'javadoc.css')
}

repositories {
    jcenter()
}

dependencies {
	compile project(':jpki-wrapper-internal')
	compile fileTree(dir: 'libs', include: ['**/*.jar'], excludes: ['**/*-sources.jar', '**/*-javadoc.jar'])
}

defaultTasks 'clean', 'build', 'jarProperties'

jar {
	manifest {
		attributes "Main-Class" : "net.osdn.jpki.wrapper.JpkiWrapper"
	}
	from('jpki-wrapper-internal/build/libs')
}

task sourcesJar(type: Jar, dependsOn: classes) {
	setGroup('build')
	setDescription('Assembles a jar archive containing the main source code.')
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	setGroup('documentation')
	setDescription('Generates Javadoc API documentation as a jar archive.')
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task jarProperties(dependsOn: [sourcesJar, javadocJar]) << {
	def f = file("${buildDir}/libs/${archivesBaseName}-${version}.jar.properties")
	f.getParentFile().mkdirs();
	f.write("src=${archivesBaseName}-${version}-sources.jar\n", 'UTF-8')
	f.append("doc=${archivesBaseName}-${version}-javadoc.jar\n", 'UTF-8')
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
