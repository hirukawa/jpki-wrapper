apply plugin: 'java'
apply plugin: 'eclipse'

archivesBaseName = 'jpki-wrapper'
version = '0.3.3'

tasks.withType(JavaCompile) {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
}

def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile).each { it.options.encoding = defaultEncoding }
tasks.withType(GroovyCompile).each { it.groovyOptions.encoding = defaultEncoding }

javadoc {
	options.charSet = 'UTF-8'
	options.encoding = 'UTF-8'
	options.stylesheetFile = new File(rootDir, 'javadoc.css')
}

repositories {
    jcenter()
}

dependencies {
	implementation project(':jpki-wrapper-internal32')
	implementation project(':jpki-wrapper-internal64')

	implementation 'net.java.dev.jna:jna:5.4.0'
	implementation 'net.java.dev.jna:jna-platform:5.4.0'
	implementation 'org.apache.pdfbox:pdfbox:2.0.16'
}

defaultTasks 'clean', 'build', 'jar', 'jarProperties'

jar {
	manifest {
		attributes "Specification-Version": "${project.version}"
		attributes "Implementation-Version": "${project.version}"
	}
	from('jpki-wrapper-internal32/build/libs')
	from('jpki-wrapper-internal64/build/libs')
}

task sourcesJar(type: Jar, dependsOn: classes) {
	setGroup('build')
	setDescription('Assembles a jar archive containing the main source code.')
	archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	setGroup('documentation')
	setDescription('Generates Javadoc API documentation as a jar archive.')
	archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

task jarProperties(dependsOn: [sourcesJar, javadocJar]) {
	def f = file("${buildDir}/libs/${archivesBaseName}-${version}.jar.properties")
	f.getParentFile().mkdirs();
	f.write("src=${archivesBaseName}-${version}-sources.jar\n", 'UTF-8')
	f.append("doc=${archivesBaseName}-${version}-javadoc.jar\n", 'UTF-8')
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task copyLibraries(type: Copy) {
	setGroup("build")
	setDescription("Copy dependency libraries.")
	from (sourceSets.main.runtimeClasspath) {
		include '*.jar'
		exclude 'jpki-*', 'JPKI*'
	}
	into "${buildDir}/package/lib/"
}
